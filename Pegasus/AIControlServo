/*
 * Copyright (c) 2022 HiSilicon (Shanghai) Technologies CO., LIMITED.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>
#include <unistd.h>
#include <hi_io.h>
#include <string.h>

#include "ohos_init.h"
#include "cmsis_os2.h"
#include "iot_gpio.h"
#include "iot_gpio_ex.h"
#include "iot_watchdog.h"
#include "iot_pwm.h"
#include "hi_time.h"
#include "iot_uart.h"
#include "hi_uart.h"
#include "iot_errno.h"

#define IOT_GPIO_VERTICAL 6
#define IOT_GPIO_HORIZENTAL 7
#define UART_BUFF_SIZE 100
#define U_SLEEP_TIME   100000


/***************************************************************
 * 函数功能: 初始化uart管脚
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明: 无
 **************************************************************/
void Uart1GpioInit(void)
{
    IoTGpioInit(IOT_IO_NAME_GPIO_0);
    // 设置GPIO0的管脚复用关系为UART1_TX Set the pin reuse relationship of GPIO0 to UART1_ TX
    IoSetFunc(IOT_IO_NAME_GPIO_0, IOT_IO_FUNC_GPIO_0_UART1_TXD);
    IoTGpioInit(IOT_IO_NAME_GPIO_1);
    // 设置GPIO1的管脚复用关系为UART1_RX Set the pin reuse relationship of GPIO1 to UART1_ RX
    IoSetFunc(IOT_IO_NAME_GPIO_1, IOT_IO_FUNC_GPIO_1_UART1_RXD);
}


/***************************************************************
 * 函数功能: 初始化uart配置
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明: 无
 **************************************************************/
void Uart1Config(void)
{
    uint32_t ret;
    /* 初始化UART配置，波特率 9600，数据bit为8,停止位1，奇偶校验为NONE */
    /* Initialize UART configuration, baud rate is 9600, data bit is 8, stop bit is 1, parity is NONE */
    IotUartAttribute uart_attr = {
        .baudRate = 115200,
        .dataBits = 8,
        .stopBits = 1,
        .parity = 0,
    };
    ret = IoTUartInit(HI_UART_IDX_1, &uart_attr);
    if (ret != IOT_SUCCESS) {
        printf("Init Uart1 Falied Error No : %d\n", ret);
        return;
    }
}

/***************************************************************
 * 函数功能: 初始化PWM配置
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明: 无
 **************************************************************/
void PWMGpioInit(void)
{
    IoTGpioInit(IOT_GPIO_VERTICAL);
    IoSetFunc(IOT_GPIO_VERTICAL, 0); /* 将GPIO定义为普通GPIO功能*/
    IoTGpioSetDir(IOT_GPIO_VERTICAL, IOT_GPIO_DIR_OUT); /* 设置GPIO方向为输出*/
    IoTGpioSetOutputVal(IOT_GPIO_VERTICAL, IOT_GPIO_VALUE0); /* GPIO输出初始值为0*/

    IoTGpioInit(IOT_GPIO_HORIZENTAL);
    IoSetFunc(IOT_GPIO_HORIZENTAL, 0); /* 将GPIO定义为普通GPIO功能*/
    IoTGpioSetDir(IOT_GPIO_HORIZENTAL, IOT_GPIO_DIR_OUT); /* 设置GPIO方向为输出*/
    IoTGpioSetOutputVal(IOT_GPIO_HORIZENTAL, IOT_GPIO_VALUE0); /* GPIO输出初始值为0*/
}

/***************************************************************
 * 函数功能: 初始化舵机位置
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明: 无
 **************************************************************/
void ServoInit()
{
    serve_control_horizental(0);
    serve_control_vertical(0);
}

/***************************************************************
 * 函数功能: 将Taurus识别到的坦克x坐标转换为控制水平舵机的角度
 * 输入参数: 坦克x坐标
 * 返 回 值: 水平舵机转动角度
 * 说    明: 这里的常数interval需要自己根据实际位置调试
 **************************************************************/
int trans_horizental(int x)
{
    double interval = 1000.0;
    return x / interval;
}

/***************************************************************
 * 函数功能: 将Taurus识别到的坦克y坐标转换为控制竖直舵机的角度
 * 输入参数: 坦克y坐标
 * 返 回 值: 竖直舵机转动角度
 * 说    明: 这里的常数interval需要自己根据实际位置调试
 **************************************************************/
int trans_vertical(int y)
{
    double interval = 1000.0;
    return y / interval;
}

/***************************************************************
 * 函数功能: 控制水平舵机旋转
 * 输入参数: 水平舵机转动角度
 * 返 回 值: 无
 * 说    明: 无
 **************************************************************/
void serve_control_horizental(int horizental_angle) 
{
    IoTGpioSetOutputVal(IOT_GPIO_HORIZENTAL, 1);
    hi_udelay(1500 + horizental_angle);
    IoTGpioSetOutputVal(IOT_GPIO_HORIZENTAL, 0);
    hi_udelay(18500 - horizental_angle);
}

/***************************************************************
 * 函数功能: 控制竖直舵机旋转
 * 输入参数: 竖直舵机转动角度
 * 返 回 值: 无
 * 说    明: 无
 **************************************************************/
void serve_control_vertical(int vertical_angle) 
{
    IoTGpioSetOutputVal(IOT_GPIO_VERTICAL, 1);
    hi_udelay(1500 + vertical_angle);
    IoTGpioSetOutputVal(IOT_GPIO_VERTICAL, 0);
    hi_udelay(18500 - vertical_angle);
}

/***************************************************************
 * 函数功能: 使用UART接收Taurus识别的坦克坐标，控制舵机转动
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明: 无
 **************************************************************/
static void AIControlServoMain(void)
{
    const char *data = "ok\n";
    uint32_t count = 0;
    uint32_t len = 0;
    unsigned char uartReadBuff[UART_BUFF_SIZE] = {0};
    unsigned char uartX[UART_BUFF_SIZE / 2] = {0};
    unsigned char uartY[UART_BUFF_SIZE / 2] = {0};
    int xIdx, yIdx, xInt, yInt, flag;

    // 对UART1的一些初始化
    Uart1GpioInit();
    // 对UART1参数的一些配置
    Uart1Config();
    // 将GPIO初始化为PWM，控制两个舵机
    PWMGpioInit();
    // 舵机初始化，指向左上角，坐标轴原点
    ServoInit();

    while (1) {
        // 通过UART1 接收数据
        xIdx = yIdx = xInt = yInt = flag = 0;
        len = IoTUartRead(HI_UART_IDX_1, uartReadBuff, UART_BUFF_SIZE);
        if (len > 0) {
            unsigned char curChar;
            for (int i = 0; i < len; i++) {
                curChar = uartReadBuff[i];
                if (flag == 0) {
                    if (curChar == ' ') {
                        flag = 1;
                    } else {
                        uartX[xIdx++] = curChar;
                    }
                } else {
                    uartY[yIdx++] = curChar;
                }
            }
            uartX[xIdx] = '\0';
            uartY[yIdx] = '\0';
            xInt = atoi(uartX);
            yInt = atoi(uartY);

            serve_control_horizental(trans_horizental(xInt));
            serve_control_vertical(trans_vertical(yInt));
        }
        usleep(U_SLEEP_TIME); // 暂停0.1s
    }
    
}

void AIControlServo(void)
{
    osThreadAttr_t attr;
    IoTWatchDogDisable();

    attr.name = "AIControlServo";
    attr.attr_bits = 0U;
    attr.cb_mem = NULL;
    attr.cb_size = 0U;
    attr.stack_mem = NULL;
    attr.stack_size = 5 * 1024; // 任务栈大小*1024 stack size 5*1024
    attr.priority = osPriorityNormal;

    if (osThreadNew((osThreadFunc_t)AIControlServoMain, NULL, &attr) == NULL) {
        printf("[UartTask] Failed to create UartTask!\n");
    }
}

APP_FEATURE_INIT(AIControlServo);
